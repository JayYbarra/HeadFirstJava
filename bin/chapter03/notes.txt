- Variables come in two flavors:
  1. primitive- hold fundamental values (think: simple bit patterns) including integers, booleans, and floating point numbers.
  2. reference- hold references to objects.
  
- Every variable must be declared with a type and a name. e.g. int count

- A variable is just a cup. A container. It holds something.

- You can assign a value to a variable in one of several ways including:
  o type a literal value after the equals sign (x=12, isGood = true, etc.)
  o assign the value of one variable to another (x = y)
  o use an expression combining the two (x = y + 43)
  
- You can name a class, method, or variable according to the following rules:
  o It must start with a letter, underscore (_), or dollar sign ($). You can’t start a name with a number.
  o After the first character, you can use numbers as well. Just don’t start it with a number.
  o It can be anything you like, subject to those two rules, just so long as it isn’t one of Java’s reserved words.
  
- boolean char byte short int long float double = Be Careful, Bears Shouldn't Ingest Large Furry Dogs

- There is actually no such thing as an object variable. There’s only an object reference variable. An object reference
  variable holds bits that represent a way to access an object. It doesn’t hold the object itself, but it holds something
  like a pointer.
  
- Objects live in one place and one place only—the garbage collectible heap!

- An object reference variable is full of bits representing a way to get to the object.

- Use the dot operator (.) on a reference variable to say, “use the thing before the dot to get me the thing after the dot.”
  myDog.bark(); means, “use the object referenced by the variable myDog to invoke the bark() method.” It's like pressing a button 
  on the remote control to access a method or instance variable.
  
- The 3 steps of object declaration, creation, and assignment:
  1. Declare a reference variable- Dog myDog
  2. Create an object- new Dog();
  3. Link object and reference- Dog myDog = new Dog();
  
- Object Reference Variable is like a remote control that can be programmed to control different objects.
  o can only refer to one type of object. e.g. Dog type cannot refer to cat type.
  o can refer to more than one Dog type, unless it is marked as final.
  o can be referred to nothing (null). Null is a value, but it refers to nothing. Like having a remote w/o a tv.
  
- Every element in an array is just a variable. Anything you would put in a variable of that type can be assigned to 
  an array element of that type i.e. in an array of type int (int[]), each element can hold an int. In a Dog array (Dog[]) 
  each element can hold...a Dog? No, remember that a reference variable just holds a reference (a remote control), 
  not the object itself. So in a Dog array, each element can hold a remote control to a Dog.
  
- Arrays are always objects, whether they’re declared to hold primitives or object references.

- Once an array is declared, you can't put anything in it except the things that are of the declared variable type. e.g. you 
  can't put a Cat in a Dog array. Imagine asking each Dog in the array to bark, only to find out there is a Cat in the array.

- You cannot stick a double in a int (spillage), but you can stick a byte into an array because it will always fit
  (implicit widening). 